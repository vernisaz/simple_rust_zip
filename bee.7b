crate=simzip
crate_dir=..${~/~}crates
dep_crates=[--extern,time=${crate_dir}${~/~}libtime.rlib] #,--extern,libdeflater=${crate_dir}/liblibdeflater.rlib]
use deflater=true
unix test=!true

feat=[]

absolute(crate_dir)
assign(crate_dir,~~)

target test {
	dependency{target(compile test)}
	dependency{}
	exec src/test (~args~)
	exec unzip(-t,test)
}

target compile test:src {
   dependency{ target(simple_zip)}
   dependency {
       or {
       anynewer(..${~/~}bee.7b,test)
       anynewer(${~cwd~}${~/~}test.rs,${~cwd~}${~/~}test)
       anynewer(${crate_dir}${~/~}lib${crate}.rlib,${~cwd~}${~/~}test)
       }
   }

   display(Compiling test ...)
   if {
		eq(unix test,true)
		then {
			array(--cfg, feature="test_unix")
		} else {
			array()
		}
	}
	assign(feat,~~)
    exec rustc::  (
       --color, always,
       -L,all=${crate_dir},
       --extern, simzip,
       feat,
       -o,
       test,
       test.rs
   )
     if {
         neq(~~, 0)
         then {
            panic("compilation error(s)")
         }
     }
}

target clean {
	dependency{true}
	rm (${crate_dir}${~/~}lib${crate}.rlib)
}

target simple_zip:src {
    dependency{
        or{
        	anynewer(${~cwd~}${~/~}*.rs,${crate_dir}${~/~}lib${crate}.rlib)
        	anynewer(..${~/~}bee.7b,${crate_dir}${~/~}lib${crate}.rlib)
        }
    }
	display(Building crate ${crate} in ${crate_dir}${~/~}lib${crate}.rlib)
	if {
		eq(use deflater,true)
		then {
			array(--cfg, feature="deflate")
			assign(feat,~~)
		}
	}
	exec rustc::  (
	  --color, always,
	 -C, opt-level=2,
	 -L, crate_dir,
	 --crate-type=lib,
	 --edition, 2024,
	 dep_crates,
	 --crate-name, crate,
     --out-dir, crate_dir,
     feat,
     lib.rs
   )
   if {
         neq(${~~}, 0)
         then {
            panic("${crate} compilation error(s)")
         }
   }
}