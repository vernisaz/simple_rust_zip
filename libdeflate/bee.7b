# 7bee (RustBee) script for building the deflate dependency
# RB version 1.13 or better is required
# libdeflate: git clone https://github.com/ebiggers/libdeflate.git
#
# libdeflater git clone https://github.com/adamkewley/libdeflater.git
# edit bee.7b in this directory specifying a location just cloned repositoies and
#  the common crate location as the crate_dir
# build: rb

# TODO incorprate the script in the main script by include()

side_dir=..${~/~}side
lib_deflate_dir=${side_dir}${~/~}libdeflate
deflater_dir=${side_dir}${~/~}libdeflater
crate_dir=..${~/~}crates

crate=libdeflater 
dep crate=libdeflate_sys

dep_crates=[--extern,libdeflate_sys]

canonicalize(lib_deflate_dir)
assign(lib_deflate_dir_can,~~)

canonicalize(crate_dir)
assign(crate_dir_can,~~)

canonicalize(deflater_dir)
assign(deflater_dir_can,~~)

assign(compile test dir,${deflater_dir_can}${~/~}examples)
assign(dep_crate_comp dir,${deflater_dir_can}${~/~}libdeflate-sys${~/~}src)
assign(crate_compile dir,${deflater_dir_can}${~/~}src)

target clean:: {
     dependency{}
     rm(${crate_dir_can}${~/~}liblibdeflate_sys.rlib,${crate_dir_can}${~/~}liblibdeflater.rlib)
}

target test:compile test dir {
	dependency{target(compile test)}
	dependency{}
	exec test (~args~)
}

target compile test:compile test dir {
   dependency{ target(crate_compile)}
   dependency {
       or {
       anynewer(..${~/~}bee.7b,test)
       anynewer(${~cwd~}${~/~}gz_compress.rs,${~cwd~}${~/~}test)
       anynewer(${crate_dir_can}${~/~}lib${crate}.rlib,${~cwd~}${~/~}test)
       }
   }

   display(Compiling test ...)
   exec rustc::  (
       --color, always,
       -L,all=crate_dir_can,
       --extern, crate,
       -o,
       test,
       gz_compress.rs
   )
     if {
         neq(~~, 0)
         then {
            panic("test compilation error(s)")
         }
     }
}

target deflate : lib_deflate_dir_can {
    dependency {
       eq {
       	   timestamp(build${~/~}libdeflate.a)
       }
    }
    display(${~cwd~} <= ${lib_deflate_dir_can})
	exec cmake (cmake -B build)
	if {
         neq(~~, 0)
         then {
            panic("cmake error(s)")
         }
     }
	exec cmake (cmake --build build)
	if {
         neq(~~, 0)
         then {
            panic("cmake error(s)")
         }
     }
     display(lib built)
}

target dep_crate_comp:dep_crate_comp dir {
    dependency{
    	anynewer(${~cwd~}${~/~}*.rs,${crate_dir_can}${~/~}lib${dep crate}.rlib)
    }
    dependency{target(deflate)}
	display(Building crate ${dep crate} in ${crate_dir}${~/~}lib${crate}.rlib)
	exec rustc::  (
	  --color, always,
	 -C, opt-level=0,
	 --crate-type=lib,
	 --edition, 2024,
     -L, ${lib_deflate_dir_can}${~/~}build,
     -l, static=deflate,
	 --crate-name, dep crate,
     --out-dir, crate_dir_can,
     lib.rs
   )
   if {
         neq(${~~}, 0)
         then {
            panic("${dep crate} compilation error(s)")
         }
   }
}

target dev : {
	dependency{crate_compile}
	
	display(crates dir: ${crate_dir_can})
	display(deflate dir: ${lib_deflate_dir_can})
	display(deflater dir: ${deflater_dir_can})
}

target crate_compile:crate_compile dir {
    dependency { target(dep_crate_comp)}
    dependency{
    	anynewer(${~cwd~}${~/~}*.rs,${crate_dir_can}${~/~}lib${crate}.rlib)
    }
	display(Building crate ${crate} in ${crate_dir}${~/~}lib${crate}.rlib)
	exec rustc::  (
	  --color, always,
	 -C, opt-level=0,
	 -L, crate_dir_can,
	 --crate-type=lib,
	 --edition, 2024,
	 dep_crates,
	 --crate-name, crate,
     --out-dir, crate_dir_can,
     lib.rs
   )
   if {
         neq(${~~}, 0)
         then {
            panic("${crate} compilation error(s)")
         }
   }
}